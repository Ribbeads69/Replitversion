// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// server/storage.ts
import { randomUUID } from "crypto";
var MemStorage = class {
  contacts;
  templates;
  sequences;
  campaigns;
  campaignContacts;
  constructor() {
    this.contacts = /* @__PURE__ */ new Map();
    this.templates = /* @__PURE__ */ new Map();
    this.sequences = /* @__PURE__ */ new Map();
    this.campaigns = /* @__PURE__ */ new Map();
    this.campaignContacts = /* @__PURE__ */ new Map();
    this.seedData();
  }
  seedData() {
    const sampleContacts = [
      {
        id: randomUUID(),
        firstName: "Sarah",
        lastName: "Johnson",
        email: "sarah@techcorp.com",
        company: "TechCorp",
        position: "CTO",
        phone: "+1-555-0123",
        status: "replied",
        tags: ["enterprise", "decision-maker"],
        customFields: {},
        lastContactedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3),
        createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1e3)
      },
      {
        id: randomUUID(),
        firstName: "Mike",
        lastName: "Rogers",
        email: "mike@startup.io",
        company: "Startup Inc",
        position: "CEO",
        phone: "+1-555-0124",
        status: "contacted",
        tags: ["startup", "founder"],
        customFields: {},
        lastContactedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1e3),
        createdAt: new Date(Date.now() - 45 * 24 * 60 * 60 * 1e3)
      }
    ];
    sampleContacts.forEach((contact) => this.contacts.set(contact.id, contact));
    const sampleTemplates = [
      {
        id: randomUUID(),
        name: "Cold Outreach - Product Demo",
        subject: "Quick question about {{company_name}}",
        body: `Hi {{first_name}},

I noticed {{company_name}} is working on some exciting projects. I'd love to show you how our platform has helped similar companies increase their conversion rates by 25%.

Would you be interested in a quick 15-minute demo this week?

Best regards,
{{sender_name}}`,
        description: "Initial contact for product demonstration",
        isActive: true,
        createdAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1e3),
        updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3)
      },
      {
        id: randomUUID(),
        name: "Follow-up #1",
        subject: "Re: Quick question about {{company_name}}",
        body: `Hi {{first_name}},

I wanted to follow up on my previous email about how we can help {{company_name}} improve conversion rates.

I understand you're busy, but I'd love to share a quick case study of how we helped a similar company achieve great results.

Would you have 10 minutes this week for a brief call?

Best,
{{sender_name}}`,
        description: "First follow-up for non-responders",
        isActive: true,
        createdAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1e3),
        updatedAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1e3)
      }
    ];
    sampleTemplates.forEach((template) => this.templates.set(template.id, template));
    const sampleSequences = [
      {
        id: randomUUID(),
        name: "Cold Outreach Flow",
        description: "Complete cold outreach sequence with follow-ups",
        steps: [
          { templateId: Array.from(this.templates.keys())[0], waitDays: 0 },
          { templateId: Array.from(this.templates.keys())[1], waitDays: 3 }
        ],
        isActive: true,
        createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1e3),
        updatedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1e3)
      }
    ];
    sampleSequences.forEach((sequence) => this.sequences.set(sequence.id, sequence));
    const sampleCampaigns = [
      {
        id: randomUUID(),
        name: "Q4 Product Launch",
        sequenceId: Array.from(this.sequences.keys())[0],
        status: "active",
        totalContacts: 500,
        sentEmails: 342,
        openedEmails: 118,
        repliedEmails: 23,
        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1e3),
        updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1e3)
      }
    ];
    sampleCampaigns.forEach((campaign) => this.campaigns.set(campaign.id, campaign));
  }
  // Contacts
  async getContacts() {
    const contactsArray = Array.from(this.contacts.values());
    return contactsArray.map((contact) => ({
      ...contact,
      campaignCount: Array.from(this.campaignContacts.values()).filter((cc) => cc.contactId === contact.id).length,
      lastCampaign: "Q4 Product Launch"
      // Mock data
    }));
  }
  async getContact(id) {
    return this.contacts.get(id);
  }
  async getContactByEmail(email) {
    return Array.from(this.contacts.values()).find((contact) => contact.email === email);
  }
  async createContact(insertContact) {
    const id = randomUUID();
    const contact = {
      ...insertContact,
      id,
      createdAt: /* @__PURE__ */ new Date()
    };
    this.contacts.set(id, contact);
    return contact;
  }
  async updateContact(id, updates) {
    const existing = this.contacts.get(id);
    if (!existing) return void 0;
    const updated = { ...existing, ...updates };
    this.contacts.set(id, updated);
    return updated;
  }
  async deleteContact(id) {
    const deleted = this.contacts.delete(id);
    for (const [ccId, cc] of this.campaignContacts.entries()) {
      if (cc.contactId === id) {
        this.campaignContacts.delete(ccId);
      }
    }
    return deleted;
  }
  async createContactsBulk(contacts2) {
    const created = [];
    for (const contact of contacts2) {
      const existing = await this.getContactByEmail(contact.email);
      if (!existing) {
        const newContact = await this.createContact(contact);
        created.push(newContact);
      }
    }
    return created;
  }
  // Templates
  async getTemplates() {
    return Array.from(this.templates.values()).sort(
      (a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()
    );
  }
  async getTemplate(id) {
    return this.templates.get(id);
  }
  async createTemplate(insertTemplate) {
    const id = randomUUID();
    const now = /* @__PURE__ */ new Date();
    const template = {
      ...insertTemplate,
      id,
      createdAt: now,
      updatedAt: now
    };
    this.templates.set(id, template);
    return template;
  }
  async updateTemplate(id, updates) {
    const existing = this.templates.get(id);
    if (!existing) return void 0;
    const updated = {
      ...existing,
      ...updates,
      updatedAt: /* @__PURE__ */ new Date()
    };
    this.templates.set(id, updated);
    return updated;
  }
  async deleteTemplate(id) {
    return this.templates.delete(id);
  }
  // Sequences
  async getSequences() {
    return Array.from(this.sequences.values()).sort(
      (a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()
    );
  }
  async getSequence(id) {
    return this.sequences.get(id);
  }
  async createSequence(insertSequence) {
    const id = randomUUID();
    const now = /* @__PURE__ */ new Date();
    const sequence = {
      ...insertSequence,
      id,
      createdAt: now,
      updatedAt: now
    };
    this.sequences.set(id, sequence);
    return sequence;
  }
  async updateSequence(id, updates) {
    const existing = this.sequences.get(id);
    if (!existing) return void 0;
    const updated = {
      ...existing,
      ...updates,
      updatedAt: /* @__PURE__ */ new Date()
    };
    this.sequences.set(id, updated);
    return updated;
  }
  async deleteSequence(id) {
    return this.sequences.delete(id);
  }
  // Campaigns
  async getCampaigns() {
    const campaignArray = Array.from(this.campaigns.values());
    return campaignArray.map((campaign) => ({
      ...campaign,
      sequence: campaign.sequenceId ? this.sequences.get(campaign.sequenceId) : void 0
    })).sort(
      (a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()
    );
  }
  async getCampaign(id) {
    const campaign = this.campaigns.get(id);
    if (!campaign) return void 0;
    return {
      ...campaign,
      sequence: campaign.sequenceId ? this.sequences.get(campaign.sequenceId) : void 0
    };
  }
  async createCampaign(insertCampaign) {
    const id = randomUUID();
    const now = /* @__PURE__ */ new Date();
    const campaign = {
      ...insertCampaign,
      id,
      createdAt: now,
      updatedAt: now
    };
    this.campaigns.set(id, campaign);
    return campaign;
  }
  async updateCampaign(id, updates) {
    const existing = this.campaigns.get(id);
    if (!existing) return void 0;
    const updated = {
      ...existing,
      ...updates,
      updatedAt: /* @__PURE__ */ new Date()
    };
    this.campaigns.set(id, updated);
    return updated;
  }
  async deleteCampaign(id) {
    return this.campaigns.delete(id);
  }
  // Campaign Contacts
  async getCampaignContacts(campaignId) {
    return Array.from(this.campaignContacts.values()).filter((cc) => cc.campaignId === campaignId);
  }
  async createCampaignContact(insertCampaignContact) {
    const id = randomUUID();
    const campaignContact = {
      ...insertCampaignContact,
      id,
      createdAt: /* @__PURE__ */ new Date()
    };
    this.campaignContacts.set(id, campaignContact);
    return campaignContact;
  }
  async updateCampaignContact(id, updates) {
    const existing = this.campaignContacts.get(id);
    if (!existing) return void 0;
    const updated = { ...existing, ...updates };
    this.campaignContacts.set(id, updated);
    return updated;
  }
  // Dashboard
  async getDashboardMetrics() {
    const totalContacts = this.contacts.size;
    const activeCampaigns = Array.from(this.campaigns.values()).filter((c) => c.status === "active").length;
    const allCampaigns = Array.from(this.campaigns.values());
    const totalSent = allCampaigns.reduce((sum, c) => sum + c.sentEmails, 0);
    const totalOpened = allCampaigns.reduce((sum, c) => sum + c.openedEmails, 0);
    const totalReplied = allCampaigns.reduce((sum, c) => sum + c.repliedEmails, 0);
    const openRate = totalSent > 0 ? totalOpened / totalSent * 100 : 0;
    const replyRate = totalSent > 0 ? totalReplied / totalSent * 100 : 0;
    return {
      totalContacts,
      activeCampaigns,
      openRate: Math.round(openRate * 10) / 10,
      replyRate: Math.round(replyRate * 10) / 10
    };
  }
  async getRecentActivity() {
    return [
      {
        id: "1",
        type: "reply",
        message: "Sarah Johnson replied to 'Q4 Product Launch'",
        time: "2 minutes ago",
        icon: "reply"
      },
      {
        id: "2",
        type: "sent",
        message: "Email sent to 15 contacts in 'Holiday Promotion'",
        time: "15 minutes ago",
        icon: "mail"
      },
      {
        id: "3",
        type: "import",
        message: "147 new contacts imported from CSV",
        time: "1 hour ago",
        icon: "users"
      }
    ];
  }
};
var storage = new MemStorage();

// shared/schema.ts
import { sql } from "drizzle-orm";
import { pgTable, text, varchar, integer, timestamp, boolean, jsonb } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
var contacts = pgTable("contacts", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  firstName: text("first_name").notNull(),
  lastName: text("last_name").notNull(),
  email: text("email").notNull().unique(),
  company: text("company"),
  position: text("position"),
  phone: text("phone"),
  status: text("status").notNull().default("new"),
  // new, contacted, replied, unsubscribed
  tags: text("tags").array().default([]),
  customFields: jsonb("custom_fields").default({}),
  lastContactedAt: timestamp("last_contacted_at"),
  createdAt: timestamp("created_at").default(sql`now()`).notNull()
});
var templates = pgTable("templates", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  subject: text("subject").notNull(),
  body: text("body").notNull(),
  description: text("description"),
  isActive: boolean("is_active").default(true).notNull(),
  createdAt: timestamp("created_at").default(sql`now()`).notNull(),
  updatedAt: timestamp("updated_at").default(sql`now()`).notNull()
});
var sequences = pgTable("sequences", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  description: text("description"),
  steps: jsonb("steps").notNull().default([]),
  isActive: boolean("is_active").default(true).notNull(),
  createdAt: timestamp("created_at").default(sql`now()`).notNull(),
  updatedAt: timestamp("updated_at").default(sql`now()`).notNull()
});
var campaigns = pgTable("campaigns", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  sequenceId: varchar("sequence_id").references(() => sequences.id),
  status: text("status").notNull().default("draft"),
  // draft, active, paused, completed
  totalContacts: integer("total_contacts").default(0).notNull(),
  sentEmails: integer("sent_emails").default(0).notNull(),
  openedEmails: integer("opened_emails").default(0).notNull(),
  repliedEmails: integer("replied_emails").default(0).notNull(),
  createdAt: timestamp("created_at").default(sql`now()`).notNull(),
  updatedAt: timestamp("updated_at").default(sql`now()`).notNull()
});
var campaignContacts = pgTable("campaign_contacts", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  campaignId: varchar("campaign_id").references(() => campaigns.id).notNull(),
  contactId: varchar("contact_id").references(() => contacts.id).notNull(),
  currentStep: integer("current_step").default(0).notNull(),
  status: text("status").notNull().default("pending"),
  // pending, sent, opened, replied, paused
  lastEmailSentAt: timestamp("last_email_sent_at"),
  nextEmailAt: timestamp("next_email_at"),
  createdAt: timestamp("created_at").default(sql`now()`).notNull()
});
var insertContactSchema = createInsertSchema(contacts).omit({
  id: true,
  createdAt: true
});
var insertTemplateSchema = createInsertSchema(templates).omit({
  id: true,
  createdAt: true,
  updatedAt: true
});
var insertSequenceSchema = createInsertSchema(sequences).omit({
  id: true,
  createdAt: true,
  updatedAt: true
});
var insertCampaignSchema = createInsertSchema(campaigns).omit({
  id: true,
  createdAt: true,
  updatedAt: true
});
var insertCampaignContactSchema = createInsertSchema(campaignContacts).omit({
  id: true,
  createdAt: true
});

// server/routes.ts
import multer from "multer";
import { z } from "zod";
var upload = multer({
  storage: multer.memoryStorage(),
  limits: { fileSize: 5 * 1024 * 1024 }
  // 5MB limit
});
async function registerRoutes(app2) {
  app2.get("/api/dashboard/metrics", async (req, res) => {
    try {
      const metrics = await storage.getDashboardMetrics();
      res.json(metrics);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch dashboard metrics" });
    }
  });
  app2.get("/api/dashboard/activity", async (req, res) => {
    try {
      const activity = await storage.getRecentActivity();
      res.json(activity);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch recent activity" });
    }
  });
  app2.get("/api/contacts", async (req, res) => {
    try {
      const contacts2 = await storage.getContacts();
      res.json(contacts2);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch contacts" });
    }
  });
  app2.get("/api/contacts/:id", async (req, res) => {
    try {
      const contact = await storage.getContact(req.params.id);
      if (!contact) {
        return res.status(404).json({ message: "Contact not found" });
      }
      res.json(contact);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch contact" });
    }
  });
  app2.post("/api/contacts", async (req, res) => {
    try {
      const validatedData = insertContactSchema.parse(req.body);
      const existing = await storage.getContactByEmail(validatedData.email);
      if (existing) {
        return res.status(400).json({ message: "Contact with this email already exists" });
      }
      const contact = await storage.createContact(validatedData);
      res.status(201).json(contact);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Validation error", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create contact" });
    }
  });
  app2.put("/api/contacts/:id", async (req, res) => {
    try {
      const validatedData = insertContactSchema.partial().parse(req.body);
      const contact = await storage.updateContact(req.params.id, validatedData);
      if (!contact) {
        return res.status(404).json({ message: "Contact not found" });
      }
      res.json(contact);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Validation error", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to update contact" });
    }
  });
  app2.delete("/api/contacts/:id", async (req, res) => {
    try {
      const deleted = await storage.deleteContact(req.params.id);
      if (!deleted) {
        return res.status(404).json({ message: "Contact not found" });
      }
      res.json({ message: "Contact deleted successfully" });
    } catch (error) {
      res.status(500).json({ message: "Failed to delete contact" });
    }
  });
  app2.post("/api/contacts/import", upload.single("file"), async (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ message: "No file uploaded" });
      }
      const csvContent = req.file.buffer.toString("utf-8");
      const lines = csvContent.split("\n").filter((line) => line.trim());
      if (lines.length < 2) {
        return res.status(400).json({ message: "CSV file must have headers and at least one row" });
      }
      const headers = lines[0].split(",").map((h) => h.trim().toLowerCase());
      const contacts2 = [];
      for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(",").map((v) => v.trim());
        const contact = {
          firstName: "",
          lastName: "",
          email: "",
          company: "",
          position: "",
          phone: "",
          status: "new",
          tags: [],
          customFields: {}
        };
        headers.forEach((header, index) => {
          const value = values[index] || "";
          const cleanHeader = header.replace(/"/g, "").toLowerCase();
          switch (cleanHeader) {
            case "first_name":
            case "firstname":
            case "first name":
              contact.firstName = value.replace(/"/g, "");
              break;
            case "last_name":
            case "lastname":
            case "last name":
              contact.lastName = value.replace(/"/g, "");
              break;
            case "email":
            case "email_address":
              contact.email = value.replace(/"/g, "");
              break;
            case "company":
            case "organization":
              contact.company = value.replace(/"/g, "");
              break;
            case "position":
            case "title":
            case "job_title":
              contact.position = value.replace(/"/g, "");
              break;
            case "phone":
            case "phone_number":
              contact.phone = value.replace(/"/g, "");
              break;
          }
        });
        if (contact.email && contact.firstName && contact.lastName) {
          contacts2.push(contact);
        }
      }
      const validatedContacts = contacts2.map((c) => insertContactSchema.parse(c));
      const createdContacts = await storage.createContactsBulk(validatedContacts);
      res.json({
        message: `Successfully imported ${createdContacts.length} contacts`,
        contacts: createdContacts
      });
    } catch (error) {
      console.error("CSV import error:", error);
      res.status(500).json({ message: "Failed to import contacts from CSV" });
    }
  });
  app2.get("/api/templates", async (req, res) => {
    try {
      const templates2 = await storage.getTemplates();
      res.json(templates2);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch templates" });
    }
  });
  app2.get("/api/templates/:id", async (req, res) => {
    try {
      const template = await storage.getTemplate(req.params.id);
      if (!template) {
        return res.status(404).json({ message: "Template not found" });
      }
      res.json(template);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch template" });
    }
  });
  app2.post("/api/templates", async (req, res) => {
    try {
      const validatedData = insertTemplateSchema.parse(req.body);
      const template = await storage.createTemplate(validatedData);
      res.status(201).json(template);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Validation error", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create template" });
    }
  });
  app2.put("/api/templates/:id", async (req, res) => {
    try {
      const validatedData = insertTemplateSchema.partial().parse(req.body);
      const template = await storage.updateTemplate(req.params.id, validatedData);
      if (!template) {
        return res.status(404).json({ message: "Template not found" });
      }
      res.json(template);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Validation error", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to update template" });
    }
  });
  app2.delete("/api/templates/:id", async (req, res) => {
    try {
      const deleted = await storage.deleteTemplate(req.params.id);
      if (!deleted) {
        return res.status(404).json({ message: "Template not found" });
      }
      res.json({ message: "Template deleted successfully" });
    } catch (error) {
      res.status(500).json({ message: "Failed to delete template" });
    }
  });
  app2.get("/api/sequences", async (req, res) => {
    try {
      const sequences2 = await storage.getSequences();
      res.json(sequences2);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch sequences" });
    }
  });
  app2.get("/api/sequences/:id", async (req, res) => {
    try {
      const sequence = await storage.getSequence(req.params.id);
      if (!sequence) {
        return res.status(404).json({ message: "Sequence not found" });
      }
      res.json(sequence);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch sequence" });
    }
  });
  app2.post("/api/sequences", async (req, res) => {
    try {
      const validatedData = insertSequenceSchema.parse(req.body);
      const sequence = await storage.createSequence(validatedData);
      res.status(201).json(sequence);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Validation error", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create sequence" });
    }
  });
  app2.put("/api/sequences/:id", async (req, res) => {
    try {
      const validatedData = insertSequenceSchema.partial().parse(req.body);
      const sequence = await storage.updateSequence(req.params.id, validatedData);
      if (!sequence) {
        return res.status(404).json({ message: "Sequence not found" });
      }
      res.json(sequence);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Validation error", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to update sequence" });
    }
  });
  app2.delete("/api/sequences/:id", async (req, res) => {
    try {
      const deleted = await storage.deleteSequence(req.params.id);
      if (!deleted) {
        return res.status(404).json({ message: "Sequence not found" });
      }
      res.json({ message: "Sequence deleted successfully" });
    } catch (error) {
      res.status(500).json({ message: "Failed to delete sequence" });
    }
  });
  app2.get("/api/campaigns", async (req, res) => {
    try {
      const campaigns2 = await storage.getCampaigns();
      res.json(campaigns2);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch campaigns" });
    }
  });
  app2.get("/api/campaigns/:id", async (req, res) => {
    try {
      const campaign = await storage.getCampaign(req.params.id);
      if (!campaign) {
        return res.status(404).json({ message: "Campaign not found" });
      }
      res.json(campaign);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch campaign" });
    }
  });
  app2.post("/api/campaigns", async (req, res) => {
    try {
      const validatedData = insertCampaignSchema.parse(req.body);
      const campaign = await storage.createCampaign(validatedData);
      res.status(201).json(campaign);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Validation error", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create campaign" });
    }
  });
  app2.put("/api/campaigns/:id", async (req, res) => {
    try {
      const validatedData = insertCampaignSchema.partial().parse(req.body);
      const campaign = await storage.updateCampaign(req.params.id, validatedData);
      if (!campaign) {
        return res.status(404).json({ message: "Campaign not found" });
      }
      res.json(campaign);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Validation error", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to update campaign" });
    }
  });
  app2.delete("/api/campaigns/:id", async (req, res) => {
    try {
      const deleted = await storage.deleteCampaign(req.params.id);
      if (!deleted) {
        return res.status(404).json({ message: "Campaign not found" });
      }
      res.json({ message: "Campaign deleted successfully" });
    } catch (error) {
      res.status(500).json({ message: "Failed to delete campaign" });
    }
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  },
  server: {
    fs: {
      strict: true,
      deny: ["**/.*"]
    }
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json());
app.use(express2.urlencoded({ extended: false }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = parseInt(process.env.PORT || "5000", 10);
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();